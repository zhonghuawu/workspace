/*
 * decomposition.cpp
 *
 *  Created on: Apr 22, 2016
 *      Author: huaa
 */

#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <fstream>

using namespace std;

//将字符串按特定分割字符串分割保存为向量
void split(std::string& s, std::string& delim, std::vector<std::string>* ret) {
	size_t last = 0;
	size_t index = s.find_first_of(delim, last);
	ret->clear();
	while (index != std::string::npos) {
		ret->push_back(s.substr(last, index - last));
		last = index + 1;
		index = s.find_first_of(delim, last);
	}
	if (index - last > 0) {
		ret->push_back(s.substr(last, index - last));
	}
}


void stod(vector<string>::iterator beg,vector<string>::iterator end,vector<double> &result){
	stringstream ss;
	double data;
	while(beg != end){
		ss << *beg;
		ss >> data;
		result.push_back(data);
		beg++;
		ss.clear();
	}
}

class Decomposition {
	int features_number;
	vector<vector<double> > datas;
	vector<string> labels;
public :
	Decomposition():features_number(0) {}
	void readfile(const string &filename);
};

void Decomposition::readfile(const string &filename){
	ifstream input(filename.c_str());
	if(!input){
		cout << filename << " is not exist!" << endl;
		return ;
	}
	vector<string> data;
	vector<double> data_d;
	string line = "";;
	string delim = ",";
	string tmp = "";
	while(input >> line){
		split(line,delim,&data);
		tmp=data.back();
		this->labels.push_back(tmp);
		data.pop_back();
		stod(data.begin(),data.end(),data_d);
		this->datas.push_back(data_d);
		this->features_number++;
		data_d.clear();
	}
}

int main(){
	string filename="";
	return 0;
}


